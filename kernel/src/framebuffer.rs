/// Framebuffer driver for MelloOS
/// Provides pixel-level access to the screen through memory-mapped I/O
use limine::framebuffer::Framebuffer as LimineFramebuffer;

/// Represents a framebuffer for drawing to the screen
pub struct Framebuffer {
    /// Pointer to the framebuffer memory
    address: *mut u8,
    /// Screen width in pixels
    width: usize,
    /// Screen height in pixels
    height: usize,
    /// Bytes per scanline (may include padding)
    pitch: usize,
    /// Bits per pixel
    bpp: u16,
}

impl Framebuffer {
    /// Creates a new Framebuffer from Limine framebuffer information
    ///
    /// # Arguments
    /// * `limine_fb` - Reference to Limine framebuffer structure
    ///
    /// # Returns
    /// A new Framebuffer instance
    pub fn new(limine_fb: &LimineFramebuffer) -> Self {
        Self {
            address: limine_fb.addr() as *mut u8,
            width: limine_fb.width() as usize,
            height: limine_fb.height() as usize,
            pitch: limine_fb.pitch() as usize,
            bpp: limine_fb.bpp(),
        }
    }

    /// Writes a pixel at the specified coordinates with the given color
    ///
    /// # Arguments
    /// * `x` - X coordinate (horizontal position)
    /// * `y` - Y coordinate (vertical position)
    /// * `color` - Color in 0xRRGGBB format
    ///
    /// # Safety
    /// This function performs raw memory writes to the framebuffer
    pub fn put_pixel(&mut self, x: usize, y: usize, color: u32) {
        // Bounds check
        if x >= self.width || y >= self.height {
            return;
        }

        // Calculate the offset in the framebuffer
        let bytes_per_pixel = (self.bpp / 8) as usize;
        let offset = y * self.pitch + x * bytes_per_pixel;

        unsafe {
            let pixel = self.address.add(offset) as *mut u32;
            *pixel = color;
        }
    }

    /// Clears the entire screen with the specified color
    ///
    /// # Arguments
    /// * `color` - Color in 0xRRGGBB format
    pub fn clear(&mut self, color: u32) {
        for y in 0..self.height {
            for x in 0..self.width {
                self.put_pixel(x, y, color);
            }
        }
    }

    /// Returns the width of the framebuffer in pixels
    pub fn width(&self) -> usize {
        self.width
    }

    /// Returns the height of the framebuffer in pixels
    pub fn height(&self) -> usize {
        self.height
    }

    /// Draws a single character at the specified position
    ///
    /// # Arguments
    /// * `c` - Character to draw
    /// * `x` - X coordinate (horizontal position in pixels)
    /// * `y` - Y coordinate (vertical position in pixels)
    /// * `fg_color` - Foreground color in 0xRRGGBB format
    /// * `bg_color` - Background color in 0xRRGGBB format
    pub fn draw_char(&mut self, c: char, x: usize, y: usize, fg_color: u32, bg_color: u32) {
        let glyph = get_font_glyph(c);

        for row in 0..8 {
            for col in 0..8 {
                let bit = (glyph[row] >> (7 - col)) & 1;
                let color = if bit == 1 { fg_color } else { bg_color };
                self.put_pixel(x + col, y + row, color);
            }
        }
    }

    /// Writes a string at the specified position
    ///
    /// # Arguments
    /// * `text` - String to write
    /// * `x` - Starting X coordinate (horizontal position in pixels)
    /// * `y` - Starting Y coordinate (vertical position in pixels)
    /// * `fg_color` - Foreground color in 0xRRGGBB format
    /// * `bg_color` - Background color in 0xRRGGBB format
    pub fn write_string(&mut self, text: &str, x: usize, y: usize, fg_color: u32, bg_color: u32) {
        let mut current_x = x;
        let mut current_y = y;

        for c in text.chars() {
            // Handle newline
            if c == '\n' {
                current_x = x;
                current_y += 8;
                continue;
            }

            // Handle wrapping
            if current_x + 8 > self.width {
                current_x = x;
                current_y += 8;
            }

            // Stop if we've reached the bottom of the screen
            if current_y + 8 > self.height {
                break;
            }

            self.draw_char(c, current_x, current_y, fg_color, bg_color);
            current_x += 8;
        }
    }
}

/// Simple 8x8 bitmap font
/// Each character is represented by 8 bytes, one per row
/// Each bit represents a pixel (1 = foreground, 0 = background)
fn get_font_glyph(c: char) -> [u8; 8] {
    match c {
        ' ' => [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        '!' => [0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00],
        '"' => [0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        '#' => [0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00],
        '$' => [0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00],
        '%' => [0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00],
        '&' => [0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00],
        '\'' => [0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00],
        '(' => [0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00],
        ')' => [0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00],
        '*' => [0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00],
        '+' => [0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00],
        ',' => [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06],
        '-' => [0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00],
        '.' => [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00],
        '/' => [0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00],
        '0' => [0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00],
        '1' => [0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00],
        '2' => [0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00],
        '3' => [0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00],
        '4' => [0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00],
        '5' => [0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00],
        '6' => [0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00],
        '7' => [0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00],
        '8' => [0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00],
        '9' => [0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00],
        ':' => [0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00],
        ';' => [0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06],
        '<' => [0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00],
        '=' => [0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00],
        '>' => [0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00],
        '?' => [0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00],
        '@' => [0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00],
        'A' => [0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00],
        'B' => [0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00],
        'C' => [0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00],
        'D' => [0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00],
        'E' => [0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00],
        'F' => [0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00],
        'G' => [0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00],
        'H' => [0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00],
        'I' => [0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
        'J' => [0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00],
        'K' => [0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00],
        'L' => [0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00],
        'M' => [0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00],
        'N' => [0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00],
        'O' => [0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00],
        'P' => [0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00],
        'Q' => [0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00],
        'R' => [0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00],
        'S' => [0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00],
        'T' => [0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
        'U' => [0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00],
        'V' => [0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00],
        'W' => [0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00],
        'X' => [0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00],
        'Y' => [0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00],
        'Z' => [0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00],
        '[' => [0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00],
        '\\' => [0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00],
        ']' => [0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00],
        '^' => [0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00],
        '_' => [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF],
        '`' => [0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00],
        'a' => [0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00],
        'b' => [0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00],
        'c' => [0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00],
        'd' => [0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00],
        'e' => [0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00],
        'f' => [0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00],
        'g' => [0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F],
        'h' => [0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00],
        'i' => [0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
        'j' => [0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E],
        'k' => [0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00],
        'l' => [0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
        'm' => [0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00],
        'n' => [0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00],
        'o' => [0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00],
        'p' => [0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F],
        'q' => [0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78],
        'r' => [0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00],
        's' => [0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00],
        't' => [0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00],
        'u' => [0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00],
        'v' => [0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00],
        'w' => [0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00],
        'x' => [0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00],
        'y' => [0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F],
        'z' => [0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00],
        '{' => [0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00],
        '|' => [0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00],
        '}' => [0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00],
        '~' => [0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        '✨' => [0x00, 0x24, 0x18, 0xFF, 0x18, 0x24, 0x00, 0x00], // Sparkle emoji approximation
        _ => [0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E], // Default: smiley face for unknown chars
    }
}
